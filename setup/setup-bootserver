#!/usr/bin/python3

import argparse
import getpass
import glob
import ipaddress
import json
import os
import shutil
import string
import subprocess
import sys

ETCD_DATA_DIR = '/var/lib/etcd-container'
ETCD_DATA_DIR_UID = 10000
ETCD_DATA_DIR_GID = 10000
ETCD_BACKUP_DIR = '/var/lib/etcd-backup'
ETCD_BACKUP_PASSWORD = '/usr/local/etc/etcd-backup.passwd'
SABAKAN_DATA_DIR = '/var/lib/sabakan'
ETCDCONF_TMPL = 'etcd.conf.yml.template'
ETCDCONF = '/etc/etcd/etcd.conf.yml'
SABAKANCONF_TMPL = 'sabakan.yml.template'
SABAKANCONF = '/usr/local/etc/sabakan.yml'
ETCDPASSWDCONF = '/etc/etcdpasswd.yml'
RACK_INFORMATION = '/etc/neco/rack'


def boot_node0_ip(lrn: int) -> ipaddress.IPv4Address:
    return ipaddress.IPv4Address('10.69.0.0') + 192 * lrn + 3


def my_lrn() -> int:
    with open(RACK_INFORMATION) as f:
        return int(f.read())


def prepare_etcd_data_dir():
    if os.path.exists(ETCD_DATA_DIR):
        raise RuntimeError(ETCD_DATA_DIR + ' already exists')
    os.makedirs(ETCD_DATA_DIR, 0o755)
    os.chown(ETCD_DATA_DIR, ETCD_DATA_DIR_UID, ETCD_DATA_DIR_GID)
    os.makedirs(ETCD_BACKUP_DIR, 0o755, exist_ok=True)


def prepare_sabakan_data_dir():
    if os.path.exists(SABAKAN_DATA_DIR):
        raise RuntimeError(SABAKAN_DATA_DIR + ' already exists')
    os.makedirs(SABAKAN_DATA_DIR, 0o755)


def initial_cluster_url(lrn: int) -> str:
    name = "boot-{}".format(lrn)
    url = "http://{}:2380".format(boot_node0_ip(lrn))
    return name + "=" + url


def dump_file(name: str, data: str):
    os.makedirs(os.path.dirname(name), 0o755, exist_ok=True)
    with open(name, "w") as f:
        f.write(data)
        f.flush()
        os.fsync(f.fileno())


def systemctl(*args):
    cmd = ["systemctl"]
    cmd.extend(args)
    subprocess.run(cmd, check=True)


def etcdctl(*args) -> str:
    cmd = ["rkt", "run", "--net=host", "quay.io/cybozu/etcd:3.3", "--exec", "etcdctl", "--"]
    cmd.extend(args)
    return subprocess.check_output(cmd).decode('utf-8')


def add_member(lrn: int, racks: [int]) -> dict:
    new_host = boot_node0_ip(lrn)

    endpoints_lrn = filter(lambda n: n != lrn, racks)
    endpoints_host = map(lambda n: 'http://{!s}:2379'.format(boot_node0_ip(n)), endpoints_lrn)

    passwd = getpass.getpass("root Password:")
    raw_result = etcdctl(
        'member', 'add', 'boot-{}'.format(lrn),
        '--peer-urls=http://{!s}:2379'.format(new_host),
        '--endpoints={}'.format(','.join(endpoints_host)),
        '--user', 'root:{}'.format(passwd), '-w', 'json'
    )
    result_jsonf = raw_result.split(":", 1)[1]
    result = json.loads(result_jsonf)

    return result


def format_initial_cluster(d: list, my_host: str) -> str:
    results = []
    for member in d:
        host = member["name"] if "name" in member else my_host
        s = "{}={}".format(host, ",".join(member["peerURLs"]))
        results.append(s)
    return ",".join(results)


def setup_etcd(action: str, lrn: int, racks: [int]):
    node0 = boot_node0_ip(lrn)

    params = {'lrn': lrn}
    if action == 'init':
        params['initial_advertise_peer_urls'] = 'http://{!s}:2380'.format(node0)
        params['advertise_client_urls'] = 'http://{!s}:2379'.format(node0)
        params['initial_cluster'] = ','.join(initial_cluster_url(n) for n in racks)
        params['initial_cluster_state'] = 'new'

    elif action == 'join':
        result = add_member(lrn, racks)
        params['initial_advertise_peer_urls'] = ",".join(result["member"]["peerURLs"])
        params['advertise_client_urls'] = 'http://{!s}:2379'.format(node0)
        params['initial_cluster'] = format_initial_cluster(result["members"], 'boot-{}'.format(lrn))
        params['initial_cluster_state'] = 'existing'

    prepare_etcd_data_dir()
    with open(ETCDCONF_TMPL) as f:
        templ = string.Template(f.read())
    data = templ.substitute(params)
    dump_file(ETCDCONF, data)

    shutil.copyfile("/extras/setup/etcd-container.service", "/etc/systemd/system/etcd-container.service")
    systemctl("daemon-reload")
    systemctl("enable", "etcd-container.service")
    systemctl("start", "etcd-container.service")
    print("Initialized etcd")


def setup_sabakan(lrn: int, racks: [int], password: str):
    subprocess.run([
        "rkt", "run",
        "--volume=host-usr-local-bin,kind=host,source=/usr/local/bin,readOnly=false",
        "--mount=volume=host-usr-local-bin,target=/host/usr/local/bin",
        "--volume=host-etc-bash-completion-d,kind=host,source=/etc/bash_completion.d,readOnly=false",
        "--mount=volume=host-etc-bash-completion-d,target=/host/etc/bash_completion.d",
        "quay.io/cybozu/sabakan:0",
        "--user=0",
        "--exec=/usr/local/sabakan/install-tools"], check=True)

    prepare_sabakan_data_dir()
    with open(SABAKANCONF_TMPL) as f:
        templ = string.Template(f.read())
    etcd_servers = ['http://{!s}:2379'.format(boot_node0_ip(lrn)) for lrn in racks]
    advertise_url = 'http://{!s}:10080'.format(boot_node0_ip(lrn))
    data = templ.substitute(
        advertise_url=advertise_url,
        etcd_servers=json.dumps(etcd_servers),
        etcd_password=password,
    )
    dump_file(SABAKANCONF, data)

    shutil.copyfile("/extras/setup/sabakan.service", "/etc/systemd/system/sabakan.service")
    shutil.copyfile("/extras/setup/sabakan-local.service", "/etc/systemd/system/sabakan-local.service")
    systemctl("daemon-reload")
    systemctl("enable", "sabakan.service")
    systemctl("start", "sabakan.service")
    print("Initialized sabakan")


def setup_etcd_backup(password: str):

    dump_file(ETCD_BACKUP_PASSWORD, password)

    shutil.copyfile("/extras/setup/etcd-backup", "/usr/local/bin/etcd-backup")
    os.chmod("/usr/local/bin/etcd-backup", 0o755)
    shutil.copyfile("/extras/setup/etcd-backup.service", "/etc/systemd/system/etcd-backup.service")
    shutil.copyfile("/extras/setup/etcd-backup.timer", "/etc/systemd/system/etcd-backup.timer")

    systemctl("daemon-reload")
    systemctl("start", "etcd-backup.timer")
    print("Initialized etcd-backup")


def setup_etcdpasswd(racks: [int], password: str):
    etcd_servers = ['http://{!s}:2379'.format(boot_node0_ip(lrn)) for lrn in racks]
    tmpl = string.Template('''endpoints: ${etcd_servers}
username: etcdpasswd
password: ${password}
''')
    data = tmpl.substitute(
        etcd_servers=json.dumps(etcd_servers),
        password=password,
    )
    dump_file(ETCDPASSWDCONF, data)

    deb = glob.glob('/extras/etcdpasswd*.deb')
    subprocess.run(['dpkg', '-i', deb[0]], check=True)

    shutil.copyfile('/extras/setup/sshd_config', '/etc/ssh/sshd_config')
    # do not restart ssh.service at this point.

    shutil.copyfile('/extras/setup/sudoers', '/etc/sudoers.d/.cybozu')
    os.chmod('/etc/sudoers.d/.cybozu', 0o440)
    os.rename('/etc/sudoers.d/.cybozu', '/etc/sudoers.d/cybozu')
    print("Initialized etcdpasswd")


def init(action: str, racks: [int], saba_passwd: str, backup_passwd: str, etcdpasswd_passwd: str):
    lrn = my_lrn()

    if action == 'init' and lrn not in racks:
        raise RuntimeError('Logical rack number is not included in racks.')

    setup_etcd(action, lrn, racks)
    setup_etcd_backup(backup_passwd)

    setup_etcdpasswd(racks, etcdpasswd_passwd)
    setup_sabakan(lrn, racks, saba_passwd)
    os.sync()


def main():
    p = argparse.ArgumentParser()
    p.add_argument('--sabakan-etcd-password', dest='saba_passwd',
                   help='etcd sabakan user password (only for GCP env)')
    p.add_argument('--backup-etcd-password', dest='backup_passwd',
                   help='etcd backup user password (only for GCP env)')
    p.add_argument('--etcdpasswd-etcd-password', dest='etcdpasswd_passwd',
                   help='etcdpasswd user password (only for GCP env)')
    p.add_argument('action', choices=['init', 'join'])
    p.add_argument('racks', metavar='RACK_NUMBERS', type=int, nargs='+',
                   help='logical rack numbers where etcd should run')

    ns = p.parse_args()

    saba_passwd = ns.saba_passwd
    if saba_passwd is None:
        saba_passwd = getpass.getpass('sabakan etcd password: ')

    backup_passwd = ns.backup_passwd
    if backup_passwd is None:
        backup_passwd = getpass.getpass('backup etcd password: ')

    etcdpasswd_passwd = ns.etcdpasswd_passwd
    if etcdpasswd_passwd is None:
        etcdpasswd_passwd = getpass.getpass('etcdpasswd etcd password: ')

    if ns.action == 'init':
        if len(ns.racks) < 3:
            sys.exit('too few etcd servers')
        for lrn in ns.racks:
            if lrn < 0:
                sys.exit('invalid rack number: {}'.format(lrn))
    init(ns.action, ns.racks, saba_passwd, backup_passwd, etcdpasswd_passwd)


if __name__ == '__main__':
    main()
