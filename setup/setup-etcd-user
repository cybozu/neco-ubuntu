#!/usr/bin/python3

import argparse
import getpass
import json
import subprocess
from subprocess import DEVNULL, PIPE
import time


def pod_uuid(app: str) ->str:
    while True:
        p = subprocess.run(['rkt', 'list', '--format=json'], stdout=PIPE, check=True)
        j = json.loads(p.stdout)
        # for unknown reason, "rkt list" sometimes returns null...
        if j is not None:
            break
        time.sleep(1)

    for d in j:
        if 'app_names' not in d:
            continue
        if app not in d['app_names']:
            continue
        if d['state'] != 'running':
            continue
        return d['name']
    raise RuntimeError('no running {} pod'.format(app))


def wait_etcd(etcdctl):
    for i in range(300):
        if etcdctl('get', '/').returncode == 0:
            return
        time.sleep(1)
    raise RuntimeError('no response from etcd')


def user_exists(etcdctl, user: str) ->bool:
    return etcdctl('user', 'get', user, stdout=DEVNULL, stderr=DEVNULL).returncode == 0


def role_exists(etcdctl, role: str) ->bool:
    return etcdctl('role', 'get', role, stdout=DEVNULL, stderr=DEVNULL).returncode == 0


def configure_root(etcdctl, passwd: str):
    if user_exists(etcdctl, 'root'):
        return
    etcdctl('user', 'add', '--interactive=false', 'root', input=passwd, check=True)
    print('added root user.')


def configure_sabakan(etcdctl, passwd):
    if user_exists(etcdctl, 'sabakan'):
        return
    if not role_exists(etcdctl, 'sabakan'):
        etcdctl('role', 'add', 'sabakan', check=True)
        etcdctl('role', 'grant-permission', 'sabakan',
                '--prefix=true', 'readwrite', '/sabakan/', check=True)
    if passwd is None:
        passwd = getpass.getpass('sabakan password: ')
    etcdctl('user', 'add', '--interactive=false', 'sabakan', input=passwd, check=True)
    etcdctl('user', 'grant-role', 'sabakan', 'sabakan', check=True)
    print('added sabakan user.')


def configure_backup(etcdctl, passwd):
    if user_exists(etcdctl, 'backup'):
        return
    if passwd is None:
        passwd = getpass.getpass('backup password: ')
    etcdctl('user', 'add', '--interactive=false', 'backup', input=passwd, check=True)
    etcdctl('user', 'grant-role', 'backup', 'root')
    print('added backup user.')


def configure_etcdpasswd(etcdctl, passwd):
    if user_exists(etcdctl, 'etcdpasswd'):
        return
    if not role_exists(etcdctl, 'etcdpasswd'):
        etcdctl('role', 'add', 'etcdpasswd', check=True)
        etcdctl('role', 'grant-permission', 'etcdpasswd',
                '--prefix=true', 'readwrite', '/passwd/', check=True)
    if passwd is None:
        passwd = getpass.getpass('etcdpasswd password: ')
    etcdctl('user', 'add', '--interactive=false', 'etcdpasswd', input=passwd, check=True)
    etcdctl('user', 'grant-role', 'etcdpasswd', 'etcdpasswd', check=True)
    print('added etcdpasswd user.')


def main():
    p = argparse.ArgumentParser(description='setup etcd user and enable authentication')
    p.add_argument('--root-password', dest='root_passwd',
                   help='etcd root user password (only for GCP env)')
    p.add_argument('--sabakan-password', dest='saba_passwd',
                   help='etcd sabakan user password (only for GCP env)')
    p.add_argument('--backup-password', dest='backup_passwd',
                   help='etcd backup user password (only for GCP env)')
    p.add_argument('--etcdpasswd-password', dest='etcdpasswd_passwd',
                   help='etcdpasswd user password (only for GCP env)')
    ns = p.parse_args()

    root_passwd = ns.root_passwd
    if root_passwd is None:
        root_passwd = getpass.getpass('root password: ')

    uuid = pod_uuid('etcd')
    def etcdctl(*args, **kwargs) ->subprocess.CompletedProcess:
        cmd = ['rkt', 'enter', '--app=etcd', uuid,
               'etcdctl', '--user=root:'+ root_passwd, *args]
        if 'input' in kwargs and 'encoding' not in kwargs:
            kwargs['encoding'] = 'utf-8'
        return subprocess.run(cmd, **kwargs)

    wait_etcd(etcdctl)
    configure_root(etcdctl, root_passwd)
    configure_sabakan(etcdctl, ns.saba_passwd)
    configure_backup(etcdctl, ns.backup_passwd)
    configure_etcdpasswd(etcdctl, ns.etcdpasswd_passwd)

    etcdctl('auth', 'enable', check=True)
    print('enabled etcd authentication.')


if __name__ == '__main__':
    main()
